import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.qameta.allure.Description;
import io.qameta.allure.Step;
import io.qameta.allure.testng.AllureTestNg;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static io.restassured.RestAssured.get;
import static org.testng.Assert.assertTrue;

@Listeners({AllureTestNg.class})
public class FanCodeCityTest {

    @Test
    @Description("Verify that users from FanCode city have more than 50% of their todo tasks completed")
    public void testUsersCompletionPercentage() {
        List<Map<String, Object>> users = fetchUsers();
        List<Map<String, Object>> todos = fetchTodos();
        List<Map<String, Object>> fanCodeUsers = filterFanCodeUsers(users);

        for (Map<String, Object> user : fanCodeUsers) {
            int userId = (Integer) user.get("id");
            List<Map<String, Object>> userTodos = getUserTodos(userId, todos);
            double completionPercentage = calculateCompletionPercentage(userTodos);
            assertTrue(completionPercentage > 50, "User " + userId + " has completion percentage " + completionPercentage + "% which is not greater than 50%");
        }
    }

    @Step("Fetch users data")
    private List<Map<String, Object>> fetchUsers() {
        Response usersResponse = get("https://jsonplaceholder.typicode.com/users");
        return usersResponse.jsonPath().getList("");
    }

    @Step("Fetch todos data")
    private List<Map<String, Object>> fetchTodos() {
        Response todosResponse = get("https://jsonplaceholder.typicode.com/todos");
        return todosResponse.jsonPath().getList("");
    }

    @Step("Filter users belonging to FanCode city")
    private List<Map<String, Object>> filterFanCodeUsers(List<Map<String, Object>> users) {
        return users.stream()
                .filter(user -> {
                    Map<String, String> geo = (Map<String, String>) ((Map<String, Object>) user.get("address")).get("geo");
                    double lat = Double.parseDouble(geo.get("lat"));
                    double lng = Double.parseDouble(geo.get("lng"));
                    return lat > -40 && lat < 5 && lng > 5 && lng < 100;
                })
                .collect(Collectors.toList());
    }

    @Step("Get todos for user with ID {0}")
    private List<Map<String, Object>> getUserTodos(int userId, List<Map<String, Object>> todos) {
        return todos.stream()
                .filter(todo -> todo.get("userId").equals(userId))
                .collect(Collectors.toList());
    }

    @Step("Calculate completion percentage")
    private double calculateCompletionPercentage(List<Map<String, Object>> userTodos) {
        long completedCount = userTodos.stream()
                .filter(todo -> (Boolean) todo.get("completed"))
                .count();
        return (double) completedCount / userTodos.size() * 100;
    }
}
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.qameta.allure.Description;
import io.qameta.allure.Step;
import io.qameta.allure.testng.AllureTestNg;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static io.restassured.RestAssured.get;
import static org.testng.Assert.assertTrue;

@Listeners({AllureTestNg.class})
public class FanCodeCityTest {

    @Test
    @Description("Verify that users from FanCode city have more than 50% of their todo tasks completed")
    public void testUsersCompletionPercentage() {
        List<Map<String, Object>> users = fetchUsers();
        List<Map<String, Object>> todos = fetchTodos();
        List<Map<String, Object>> fanCodeUsers = filterFanCodeUsers(users);

        for (Map<String, Object> user : fanCodeUsers) {
            int userId = (Integer) user.get("id");
            List<Map<String, Object>> userTodos = getUserTodos(userId, todos);
            double completionPercentage = calculateCompletionPercentage(userTodos);
            assertTrue(completionPercentage > 50, "User " + userId + " has completion percentage " + completionPercentage + "% which is not greater than 50%");
        }
    }

    @Step("Fetch users data")
    private List<Map<String, Object>> fetchUsers() {
        Response usersResponse = get("https://jsonplaceholder.typicode.com/users");
        return usersResponse.jsonPath().getList("");
    }

    @Step("Fetch todos data")
    private List<Map<String, Object>> fetchTodos() {
        Response todosResponse = get("https://jsonplaceholder.typicode.com/todos");
        return todosResponse.jsonPath().getList("");
    }

    @Step("Filter users belonging to FanCode city")
    private List<Map<String, Object>> filterFanCodeUsers(List<Map<String, Object>> users) {
        return users.stream()
                .filter(user -> {
                    Map<String, String> geo = (Map<String, String>) ((Map<String, Object>) user.get("address")).get("geo");
                    double lat = Double.parseDouble(geo.get("lat"));
                    double lng = Double.parseDouble(geo.get("lng"));
                    return lat > -40 && lat < 5 && lng > 5 && lng < 100;
                })
                .collect(Collectors.toList());
    }

    @Step("Get todos for user with ID {0}")
    private List<Map<String, Object>> getUserTodos(int userId, List<Map<String, Object>> todos) {
        return todos.stream()
                .filter(todo -> todo.get("userId").equals(userId))
                .collect(Collectors.toList());
    }

    @Step("Calculate completion percentage")
    private double calculateCompletionPercentage(List<Map<String, Object>> userTodos) {
        long completedCount = userTodos.stream()
                .filter(todo -> (Boolean) todo.get("completed"))
                .count();
        return (double) completedCount / userTodos.size() * 100;
    }
}
